import React, { useState, useEffect, useCallback } from 'react';
import { Chess } from 'chess.js';

/**
 * React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —à–∞—Ö–æ–≤–æ—ó –¥–æ—à–∫–∏ –∑ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è–º —Ö–æ–¥—ñ–≤
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ Flask API —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
 */
const ChessBoard = ({ 
  onMove = () => {}, 
  onGameEnd = () => {},
  showMoveHistory = true,
  showAnalytics = true,
  apiEndpoint = '/api/game',
  autoPlay = false,
  whiteBot = 'StockfishBot',
  blackBot = 'DynamicBot',
  infiniteMode = false
}) => {
  // –°—Ç–∞–Ω –≥—Ä–∏
  const [game, setGame] = useState(new Chess());
  const [moveHistory, setMoveHistory] = useState([]);
  const [selectedSquare, setSelectedSquare] = useState(null);
  const [possibleMoves, setPossibleMoves] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [gameStatus, setGameStatus] = useState('–ì–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏');
  const [analytics, setAnalytics] = useState({
    whiteModules: [],
    blackModules: [],
    moveTimes: [],
    positionEvals: []
  });

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ—à–∫–∏
  const initializeBoard = useCallback(() => {
    const board = [];
    for (let row = 0; row < 8; row++) {
      const boardRow = [];
      for (let col = 0; col < 8; col++) {
        const square = String.fromCharCode(97 + col) + (8 - row);
        const piece = game.get(square);
        boardRow.push({
          square,
          piece,
          color: (row + col) % 2 === 0 ? 'white' : 'black',
          row,
          col
        });
      }
      board.push(boardRow);
    }
    return board;
  }, [game]);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—É —Ñ—ñ–≥—É—Ä–∏
  const getPieceSymbol = (piece) => {
    if (!piece) return '';
    const symbols = {
      'wK': '‚ôî', 'wQ': '‚ôï', 'wR': '‚ôñ', 'wB': '‚ôó', 'wN': '‚ôò', 'wP': '‚ôô',
      'bK': '‚ôö', 'bQ': '‚ôõ', 'bR': '‚ôú', 'bB': '‚ôù', 'bN': '‚ôû', 'bP': '‚ôü'
    };
    return symbols[piece.color + piece.type.toUpperCase()] || '';
  };

  // –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –ø–æ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ
  const handleSquareClick = useCallback(async (square) => {
    if (isPlaying || game.isGameOver()) return;

    const piece = game.get(square);
    
    // –Ø–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ —Ñ—ñ–≥—É—Ä—É —Ç–æ–≥–æ –∂ –∫–æ–ª—å–æ—Ä—É, —â–æ —Ö–æ–¥–∏—Ç—å
    if (piece && piece.color === game.turn()) {
      setSelectedSquare(square);
      const moves = game.moves({ square, verbose: true });
      setPossibleMoves(moves.map(move => move.to));
    }
    // –Ø–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ –º–æ–∂–ª–∏–≤–∏–π —Ö—ñ–¥
    else if (selectedSquare && possibleMoves.includes(square)) {
      try {
        const move = game.move({
          from: selectedSquare,
          to: square,
          promotion: 'q'
        });

        if (move) {
          const moveData = {
            move,
            fen: game.fen(),
            turn: game.turn(),
            isGameOver: game.isGameOver(),
            result: game.isGameOver() ? game.result() : null,
            timestamp: new Date().toISOString()
          };

          setMoveHistory(prev => [...prev, moveData]);
          setSelectedSquare(null);
          setPossibleMoves([]);
          
          onMove(moveData);

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞
          if (game.isGameOver()) {
            setIsPlaying(false);
            setGameStatus(`–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞: ${getGameResultText(game.result())}`);
            onGameEnd(moveData);
            
            // –í –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
            if (infiniteMode) {
              setTimeout(() => {
                startGame();
              }, 1000);
            }
          } else {
            setGameStatus(`–•—ñ–¥ ${game.turn() === 'w' ? '–±—ñ–ª–∏—Ö' : '—á–æ—Ä–Ω–∏—Ö'}`);
          }

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥—Ä–∞ –∑ –±–æ—Ç–∞–º–∏
          if (autoPlay && !game.isGameOver()) {
            await makeBotMove();
          }
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É:', error);
      }
    }
  }, [game, selectedSquare, possibleMoves, isPlaying, autoPlay, onMove, onGameEnd]);

  // –ó—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥ –±–æ—Ç–æ–º
  const makeBotMove = useCallback(async () => {
    try {
      const response = await fetch(`${apiEndpoint}/move`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          fen: game.fen(),
          turn: game.turn()
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.move) {
          const move = game.move(data.move);
          if (move) {
            const moveData = {
              move,
              fen: game.fen(),
              turn: game.turn(),
              isGameOver: game.isGameOver(),
              result: game.isGameOver() ? game.result() : null,
              timestamp: new Date().toISOString(),
              bot: data.bot,
              confidence: data.confidence
            };

            setMoveHistory(prev => [...prev, moveData]);
            onMove(moveData);

            if (game.isGameOver()) {
              setIsPlaying(false);
              setGameStatus(`–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞: ${getGameResultText(game.result())}`);
              onGameEnd(moveData);
              
              // –í –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
              if (infiniteMode) {
                setTimeout(() => {
                  startGame();
                }, 1000);
              }
            } else {
              setGameStatus(`–•—ñ–¥ ${game.turn() === 'w' ? '–±—ñ–ª–∏—Ö' : '—á–æ—Ä–Ω–∏—Ö'}`);
            }
          }
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Ö–æ–¥—É –±–æ—Ç–∞:', error);
    }
  }, [game, apiEndpoint, onMove, onGameEnd]);

  // –ü–æ—á–∞—Ç–∏ –≥—Ä—É
  const startGame = useCallback(async () => {
    try {
      const response = await fetch(`${apiEndpoint}/start`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          white_bot: whiteBot,
          black_bot: blackBot,
          infinite_mode: infiniteMode
        })
      });

      if (response.ok) {
        const data = await response.json();
        setGame(new Chess());
        setMoveHistory([]);
        setSelectedSquare(null);
        setPossibleMoves([]);
        setIsPlaying(true);
        setGameStatus(infiniteMode ? '–ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∞ –≥—Ä–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞' : '–ì—Ä–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞');
        
        if (autoPlay) {
          await makeBotMove();
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏:', error);
    }
  }, [apiEndpoint, whiteBot, blackBot, autoPlay, makeBotMove, infiniteMode]);

  // –°–∫–∏–Ω—É—Ç–∏ –≥—Ä—É
  const resetGame = useCallback(async () => {
    try {
      await fetch(`${apiEndpoint}/reset`, { method: 'POST' });
      setGame(new Chess());
      setMoveHistory([]);
      setSelectedSquare(null);
      setPossibleMoves([]);
      setIsPlaying(false);
      setGameStatus('–ì–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –≥—Ä–∏:', error);
    }
  }, [apiEndpoint]);

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∏
  const getGameResultText = (result) => {
    switch (result) {
      case '1-0': return '–ë—ñ–ª—ñ –≤–∏–≥—Ä–∞–ª–∏';
      case '0-1': return '–ß–æ—Ä–Ω—ñ –≤–∏–≥—Ä–∞–ª–∏';
      case '1/2-1/2': return '–ù—ñ—á–∏—è';
      default: return '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç';
    }
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
  useEffect(() => {
    const loadAnalytics = async () => {
      try {
        const response = await fetch(`${apiEndpoint}/analytics`);
        if (response.ok) {
          const data = await response.json();
          setAnalytics(data);
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:', error);
      }
    };

    if (showAnalytics) {
      loadAnalytics();
    }
  }, [apiEndpoint, showAnalytics]);

  const board = initializeBoard();

  return (
    <div className="chess-board-container">
      <div className="chess-board-wrapper">
        <div className="chess-board">
          {board.map((row, rowIndex) =>
            row.map((cell, colIndex) => (
              <div
                key={`${rowIndex}-${colIndex}`}
                className={`chess-square ${cell.color} ${
                  selectedSquare === cell.square ? 'selected' : ''
                } ${
                  possibleMoves.includes(cell.square) ? 'possible-move' : ''
                }`}
                onClick={() => handleSquareClick(cell.square)}
              >
                {cell.piece && (
                  <span className="chess-piece">
                    {getPieceSymbol(cell.piece)}
                  </span>
                )}
                {possibleMoves.includes(cell.square) && (
                  <div className="move-indicator" />
                )}
              </div>
            ))
          )}
        </div>
        
        <div className="game-controls">
          <button 
            onClick={startGame} 
            disabled={isPlaying}
            className="btn btn-primary"
          >
            ‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É
          </button>
          <button 
            onClick={resetGame}
            className="btn btn-secondary"
          >
            üîÑ –°–∫–∏–Ω—É—Ç–∏
          </button>
        </div>
        
        <div className="game-status">
          {gameStatus}
        </div>
      </div>

      {showMoveHistory && (
        <div className="move-history">
          <h3>–Ü—Å—Ç–æ—Ä—ñ—è —Ö–æ–¥—ñ–≤</h3>
          <div className="moves-list">
            {moveHistory.map((moveData, index) => (
              <div key={index} className="move-item">
                <span className="move-number">{index + 1}.</span>
                <span className="move-notation">{moveData.move.san}</span>
                {moveData.bot && (
                  <span className="move-bot">({moveData.bot})</span>
                )}
                {moveData.confidence && (
                  <span className="move-confidence">
                    {Math.round(moveData.confidence * 100)}%
                  </span>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      {showAnalytics && (
        <div className="analytics-panel">
          <h3>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞</h3>
          <div className="analytics-content">
            <div className="module-usage">
              <h4>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤</h4>
              <div className="module-stats">
                <div className="white-modules">
                  <h5>–ë—ñ–ª—ñ:</h5>
                  {analytics.whiteModules.map((module, index) => (
                    <div key={index} className="module-item">
                      {module.name}: {module.count}
                    </div>
                  ))}
                </div>
                <div className="black-modules">
                  <h5>–ß–æ—Ä–Ω—ñ:</h5>
                  {analytics.blackModules.map((module, index) => (
                    <div key={index} className="module-item">
                      {module.name}: {module.count}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChessBoard;