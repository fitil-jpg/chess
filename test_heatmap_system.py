#!/usr/bin/env python3
"""
Test script for heatmap visualization system
–¢–µ—Å—Ç—É—î —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç
"""

import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def test_heatmap_generator():
    """–¢–µ—Å—Ç—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç...")
    
    try:
        from utils.heatmap_generator import HeatmapGenerator
        
        generator = HeatmapGenerator()
        print("‚úì HeatmapGenerator —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–≥–æ—Ä
        games = generator.load_games_for_bot('DynamicBot', limit=5)
        print(f"‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(games)} —ñ–≥–æ—Ä –¥–ª—è DynamicBot")
        
        if games:
            # –¢–µ—Å—Ç—É—î–º–æ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä—É—Ö—ñ–≤
            movements = generator.extract_piece_movements(games, 'all', 'all')
            print(f"‚úì –í–∏—Ç—è–≥–Ω—É—Ç–æ —Ä—É—Ö–∏ –¥–ª—è {len(movements)} —Ç–∏–ø—ñ–≤ —Ñ—ñ–≥—É—Ä")
            
            # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
            heatmap_data = generator.create_heatmap_data(movements, 'all')
            print(f"‚úì –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {len(heatmap_data)} —Ñ—ñ–≥—É—Ä")
            
            return True
        else:
            print("‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–≥–æ—Ä –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
            return False
            
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_heatmap_analyzer():
    """–¢–µ—Å—Ç—É—î–º–æ –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç...")
    
    try:
        from utils.heatmap_analyzer import HeatmapAnalyzer
        
        analyzer = HeatmapAnalyzer()
        print("‚úì HeatmapAnalyzer —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤
        import numpy as np
        test_heatmap = np.array([
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 2, 1, 0, 0, 0],
            [0, 0, 2, 5, 2, 0, 0, 0],
            [0, 0, 1, 2, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ])
        
        analysis = analyzer.analyze_piece_patterns(test_heatmap)
        print(f"‚úì –ê–Ω–∞–ª—ñ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ñ–≤: {analysis['total_movements']} —Ä—É—Ö—ñ–≤")
        print(f"  –ì–∞—Ä—è—á—ñ —Ç–æ—á–∫–∏: {len(analysis['hot_spots'])}")
        print(f"  –ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–Ω—Ç—Ä—É: {analysis['center_control']}")
        
        return True
        
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç—É—î–º–æ API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
        from web_server import app
        
        with app.test_client() as client:
            # –¢–µ—Å—Ç—É—î–º–æ health check
            response = client.get('/health')
            if response.status_code == 200:
                print("‚úì Health check –ø—Ä–∞—Ü—é—î")
            else:
                print(f"‚úó Health check –Ω–µ –ø—Ä–∞—Ü—é—î: {response.status_code}")
                return False
            
            # –¢–µ—Å—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç
            response = client.get('/api/heatmaps')
            if response.status_code == 200:
                print("‚úì API heatmaps –ø—Ä–∞—Ü—é—î")
            else:
                print(f"‚úó API heatmaps –Ω–µ –ø—Ä–∞—Ü—é—î: {response.status_code}")
                return False
            
            # –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç
            response = client.get('/heatmaps')
            if response.status_code == 200:
                print("‚úì Heatmap interface –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                print(f"‚úó Heatmap interface –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π: {response.status_code}")
                return False
            
            return True
            
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç API (–≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ): {e}")
        return True  # –ù–µ –≤–≤–∞–∂–∞—î–º–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é
    except Exception as e:
        print(f"‚úó –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API: {e}")
        return False

def test_directory_structure():
    """–¢–µ—Å—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
    
    required_dirs = [
        'heatmap_visualizations',
        'heatmap_visualizations/generated',
        'heatmap_visualizations/bot_specific',
        'heatmap_visualizations/game_phases',
        'heatmap_visualizations/piece_analysis',
        'runs',
        'output',
        'logs'
    ]
    
    all_exist = True
    for directory in required_dirs:
        if Path(directory).exists():
            print(f"‚úì {directory}")
        else:
            print(f"‚úó {directory} –Ω–µ —ñ—Å–Ω—É—î")
            all_exist = False
    
    return all_exist

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç –¥–ª—è —à–∞—Ö–æ–≤–∏—Ö –±–æ—Ç—ñ–≤\n")
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π", test_directory_structure),
        ("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç", test_heatmap_generator),
        ("–ê–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç", test_heatmap_analyzer),
        ("API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏", test_api_endpoints)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("=" * 50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"{test_name:30} {status}")
        if result:
            passed += 1
    
    print("=" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç—ñ–≤")
    
    if passed == len(results):
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ! –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–ª–æ–≤–∏—Ö –∫–∞—Ä—Ç –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")
        print("\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä: python3 web_server.py")
        print("2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ http://localhost:5000/heatmaps")
        print("3. –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Ç–µ–ø–ª–æ–≤—ñ –∫–∞—Ä—Ç–∏ –¥–ª—è –≤–∞—à–∏—Ö –±–æ—Ç—ñ–≤")
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - passed} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    
    return passed == len(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)