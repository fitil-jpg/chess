#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ viewer'–∞ –±–µ–∑ GUI
"""

import sys
import os
from pathlib import Path
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def demo_game_simulation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–≥—Ä"""
    print("üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä")
    print("=" * 60)
    
    try:
        import chess
        from chess_ai.bot_agent import make_agent
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤...")
        white_agent = make_agent("RandomBot", chess.WHITE)
        black_agent = make_agent("RandomBot", chess.BLACK)
        print("‚úÖ –ê–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 5 –∏–≥—Ä
        results = []
        for game_id in range(5):
            print(f"\nüéØ –ò–≥—Ä–∞ {game_id + 1}/5")
            
            board = chess.Board()
            moves = []
            modules_w = []
            modules_b = []
            fens = [board.fen()]
            
            start_time = time.time()
            move_count = 0
            
            while not board.is_game_over() and move_count < 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
                mover_color = board.turn
                agent = white_agent if mover_color == chess.WHITE else black_agent
                
                try:
                    move = agent.choose_move(board)
                    if move is None or not board.is_legal(move):
                        break
                        
                    san = board.san(move)
                    moves.append(san)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
                    reason = agent.get_last_reason() if hasattr(agent, "get_last_reason") else "RANDOM"
                    
                    if mover_color == chess.WHITE:
                        modules_w.append(reason)
                    else:
                        modules_b.append(reason)
                    
                    board.push(move)
                    fens.append(board.fen())
                    move_count += 1
                    
                    print(f"  –•–æ–¥ {move_count}: {san} ({reason})")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞: {e}")
                    break
            
            duration_ms = int((time.time() - start_time) * 1000)
            result = board.result()
            
            game_result = {
                'game_id': game_id,
                'result': result,
                'moves': moves,
                'modules_w': modules_w,
                'modules_b': modules_b,
                'fens': fens,
                'duration_ms': duration_ms,
                'move_count': move_count
            }
            
            results.append(game_result)
            
            print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} ({move_count} —Ö–æ–¥–æ–≤, {duration_ms}ms)")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return []

def demo_statistics(results):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not results:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
        
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä")
    print("=" * 40)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_count = {}
    total_moves = 0
    total_duration = 0
    
    for result in results:
        game_result = result.get('result', '*')
        results_count[game_result] = results_count.get(game_result, 0) + 1
        total_moves += result.get('move_count', 0)
        total_duration += result.get('duration_ms', 0)
    
    print(f"–í—Å–µ–≥–æ –∏–≥—Ä: {len(results)}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {total_moves}")
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration / 1000:.1f}s")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {total_duration / len(results) / 1000:.1f}s")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤: {total_moves / len(results):.1f}")
    
    print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for result, count in results_count.items():
        percentage = (count / len(results)) * 100
        print(f"  {result}: {count} –∏–≥—Ä ({percentage:.1f}%)")

def demo_module_analysis(results):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥—É–ª–µ–π"""
    if not results:
        return
        
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π")
    print("=" * 40)
    
    all_modules = {}
    
    for result in results:
        for module in result.get('modules_w', []) + result.get('modules_b', []):
            all_modules[module] = all_modules.get(module, 0) + 1
    
    if all_modules:
        print("–¢–æ–ø –º–æ–¥—É–ª–µ–π:")
        sorted_modules = sorted(all_modules.items(), key=lambda x: -x[1])
        for module, count in sorted_modules[:10]:
            percentage = (count / sum(all_modules.values())) * 100
            print(f"  {module}: {count} —Ä–∞–∑ ({percentage:.1f}%)")
    else:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–¥—É–ª—è—Ö")

def demo_interactive_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    print("=" * 40)
    
    print("–í —Ä–µ–∞–ª—å–Ω–æ–º GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:")
    print("‚úÖ –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
    print("‚úÖ Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏")
    print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º")
    print("‚úÖ –í—ã–±–æ—Ä –∏–≥—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –¥–æ—Å–∫–µ")
    print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —Ö–æ–¥–æ–≤")
    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã")
    print("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (—Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞/—Å—Ç–æ–ø)")
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä –∏ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–æ–≤")

def save_results_to_file(results):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    if not results:
        return
        
    output_file = "demo_results.json"
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ Chess Viewer")
    print("=" * 60)
    print("–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ GUI")
    print("–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–≥—Ä
    results = demo_game_simulation()
    
    if results:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        demo_statistics(results)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        demo_module_analysis(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        save_results_to_file(results)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        demo_interactive_features()
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("python3 run_interactive_viewer.py")
        print("\n(–¢—Ä–µ–±—É–µ—Ç—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–∞)")
        
    else:
        print("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)