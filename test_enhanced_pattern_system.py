#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
=================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ EnhancedDynamicBot.
"""

import sys
import chess
import json
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from chess_ai.enhanced_pattern_system import (
    PatternManager, ChessPatternEnhanced, PatternCategory,
    ExchangeType, PatternPiece, ExchangeSequence, create_default_patterns
)
from chess_ai.enhanced_pattern_detector import EnhancedPatternDetector
from chess_ai.enhanced_dynamic_bot import EnhancedDynamicBot
from chess_ai.stockfish_bot import StockfishBot
import logging

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


def test_pattern_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    
    # –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    manager = PatternManager()
    
    # –°–æ–∑–¥–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_patterns = create_default_patterns()
    for pattern in default_patterns:
        success = manager.create_pattern(pattern)
        print(f"  –°–æ–∑–¥–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern.name} - {'‚úÖ' if success else '‚ùå'}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = manager.get_pattern_statistics()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    print(f"  –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats['total_patterns']}")
    print(f"  –í–∫–ª—é—á–µ–Ω–æ: {stats['enabled_patterns']}")
    print(f"  –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {stats['by_category']}")
    
    return manager


def test_pattern_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    
    # –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = EnhancedPatternDetector()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    test_positions = [
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        ("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1", "–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è"),
        
        # –ü–æ–∑–∏—Ü–∏—è —Å —Ç–∞–∫—Ç–∏–∫–æ–π
        ("r1bqkb1r/pppp1ppp/2n2n2/4p3/2B1P3/3P1N2/PPP2PPP/RNBQK2R w KQkq - 4 4", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è"),
        
        # –≠–Ω–¥—à–ø–∏–ª—å
        ("8/8/8/3k4/8/3K4/3R4/8 w - - 0 1", "–õ–∞–¥–µ–π–Ω—ã–π —ç–Ω–¥—à–ø–∏–ª—å"),
        
        # –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è
        ("r3k2r/ppp2ppp/2n1bn2/2bpp3/2B1P3/3P1N2/PPP2PPP/RNBQ1RK1 w kq - 0 8", "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è"),
    ]
    
    for fen, description in test_positions:
        print(f"\n  üìã {description}:")
        board = chess.Board(fen)
        
        matches = detector.detect_patterns_in_position(board, max_patterns=3)
        
        if matches:
            for i, match in enumerate(matches, 1):
                print(f"    {i}. {match.pattern.name} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match.confidence:.2f})")
                print(f"       –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {match.pattern.category.value}")
                if match.suggested_move:
                    print(f"       –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π —Ö–æ–¥: {match.suggested_move}")
                print(f"       –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {match.explanation}")
        else:
            print("    –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")


def test_enhanced_dynamic_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π DynamicBot"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnhancedDynamicBot...")
    
    # –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–æ–≤
    enhanced_bot = EnhancedDynamicBot(chess.BLACK, anti_stockfish_mode=True)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
    board = chess.Board("rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1")
    
    print(f"  –ü–æ–∑–∏—Ü–∏—è: {board.fen()}")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –æ—Ç –±–æ—Ç–∞
    move, confidence = enhanced_bot.choose_move(board, debug=True)
    
    if move:
        print(f"  –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ö–æ–¥: {move} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
        print(f"  –ü—Ä–∏—á–∏–Ω–∞: {enhanced_bot.get_last_reason()}")
        print(f"  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {enhanced_bot.get_last_features()}")
    else:
        print("  ‚ùå –•–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω")


def test_bot_vs_bot():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É –±–æ—Ç –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞"""
    print("\n‚öîÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã EnhancedDynamicBot vs –æ–±—ã—á–Ω—ã–π DynamicBot...")
    
    try:
        from chess_ai.dynamic_bot import DynamicBot
        
        # –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–æ–≤
        enhanced_bot = EnhancedDynamicBot(chess.WHITE, anti_stockfish_mode=False)
        regular_bot = DynamicBot(chess.BLACK)
        
        # –°—ã–≥—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤
        board = chess.Board()
        moves_played = 0
        max_moves = 10
        
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {board.fen()}")
        
        while not board.is_game_over() and moves_played < max_moves:
            if board.turn == chess.WHITE:
                # –•–æ–¥ Enhanced –±–æ—Ç–∞
                move, confidence = enhanced_bot.choose_move(board, debug=False)
                bot_name = "Enhanced"
            else:
                # –•–æ–¥ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞
                move, confidence = regular_bot.choose_move(board, debug=False)
                bot_name = "Regular"
            
            if move:
                san = board.san(move)
                board.push(move)
                moves_played += 1
                print(f"    {moves_played}. {bot_name}: {san} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            else:
                print(f"    ‚ùå {bot_name} –Ω–µ —Å–º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥")
                break
        
        print(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {board.fen()}")
        
        if board.is_game_over():
            result = board.result()
            print(f"  üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    except ImportError as e:
        print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DynamicBot: {e}")


def test_json_storage():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å JSON —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ö—Ä–∞–Ω–µ–Ω–∏—è...")
    
    manager = PatternManager("patterns/test")
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    test_pattern = ChessPatternEnhanced(
        id="test_pattern_001",
        name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω",
        description="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        category=PatternCategory.TACTICAL,
        fen="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
        key_move="e2e4",
        participating_pieces=[
            PatternPiece("e2", "pawn", "white", "attacker", 1.0),
            PatternPiece("e4", "pawn", "white", "target", 0.8)
        ],
        exchange_sequence=ExchangeSequence(
            moves=["e2e4"],
            material_balance=0,
            positional_gain=10.0,
            evaluation_change=10.0,
            probability=0.9
        ),
        exchange_type=ExchangeType.EQUAL_TRADE,
        frequency=0.8,
        success_rate=0.7,
        tags=["test", "opening", "center"]
    )
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω
    success = manager.create_pattern(test_pattern)
    print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {'‚úÖ' if success else '‚ùå'}")
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω
    loaded_pattern = manager.load_pattern("test_pattern_001")
    if loaded_pattern:
        print(f"  –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ‚úÖ")
        print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {loaded_pattern.name}")
        print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {loaded_pattern.category.value}")
        print(f"    –§–∏–≥—É—Ä –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ: {len(loaded_pattern.participating_pieces)}")
        print(f"    –ï—Å—Ç—å —Ä–∞–∑–º–µ–Ω: {loaded_pattern.exchange_sequence is not None}")
    else:
        print(f"  –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ‚ùå")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    all_patterns = manager.get_patterns()
    print(f"  –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {len(all_patterns)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\n")
    
    try:
        # –¢–µ—Å—Ç 1: –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        manager = test_pattern_system()
        
        # –¢–µ—Å—Ç 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        test_pattern_detection()
        
        # –¢–µ—Å—Ç 3: EnhancedDynamicBot
        test_enhanced_dynamic_bot()
        
        # –¢–µ—Å—Ç 4: –ò–≥—Ä–∞ –±–æ—Ç –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
        test_bot_vs_bot()
        
        # –¢–µ—Å—Ç 5: JSON —Ö—Ä–∞–Ω–µ–Ω–∏–µ
        test_json_storage()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()