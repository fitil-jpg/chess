#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Chess React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
"""

import requests
import json
import time
import sys
from pathlib import Path

def test_api_endpoints():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API endpoints"""
    base_url = "http://localhost:5000"
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Chess React API...")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É
    try:
        response = requests.get(f"{base_url}/api/status")
        if response.status_code == 200:
            print("‚úÖ API —Å—Ç–∞—Ç—É—Å: OK")
        else:
            print(f"‚ùå API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ API. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Flask —Å–µ—Ä–≤–µ—Ä:")
        print("   python web_server.py")
        return False
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫—É –±–æ—Ç—ñ–≤
    try:
        response = requests.get(f"{base_url}/api/bots")
        if response.status_code == 200:
            bots = response.json()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –±–æ—Ç–∏: {len(bots)}")
            print(f"   {', '.join(bots[:5])}...")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ—Ç—ñ–≤: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # –¢–µ—Å—Ç –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏
    try:
        response = requests.post(f"{base_url}/api/game/start", 
                               json={"white_bot": "RandomBot", "black_bot": "RandomBot"})
        if response.status_code == 200:
            print("‚úÖ –ì—Ä—É —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # –¢–µ—Å—Ç —Ö–æ–¥—É
    try:
        response = requests.post(f"{base_url}/api/game/move")
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –•—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É: {data.get('error')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API —Ö–æ–¥—É: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    try:
        response = requests.get(f"{base_url}/api/game/analytics")
        if response.status_code == 200:
            print("‚úÖ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    return True

def test_react_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ React —Ñ–∞–π–ª—ñ–≤"""
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ React —Ñ–∞–π–ª—ñ–≤...")
    
    files_to_check = [
        "ChessBoard.jsx",
        "ChessBoard.css", 
        "ChessApp.jsx",
        "chess-react-demo.html",
        "CHESS_REACT_README.md"
    ]
    
    for file_path in files_to_check:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—ñ–≤
    for file_path in files_to_check:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"   üìä {file_path}: {size} –±–∞–π—Ç")

def test_flask_integration():
    """–¢–µ—Å—Ç —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Flask"""
    print("\nüîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Flask...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ web_server.py
    if Path("web_server.py").exists():
        print("‚úÖ web_server.py –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–æ–≤–∏—Ö endpoints
        with open("web_server.py", "r", encoding="utf-8") as f:
            content = f.read()
            
        new_endpoints = [
            "/api/game/analytics",
            "/api/game/move/analyze", 
            "/api/game/position/evaluate"
        ]
        
        for endpoint in new_endpoints:
            if endpoint in content:
                print(f"‚úÖ Endpoint {endpoint} –¥–æ–¥–∞–Ω–æ")
            else:
                print(f"‚ùå Endpoint {endpoint} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚ùå web_server.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Chess React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç —Ñ–∞–π–ª—ñ–≤
    test_react_files()
    
    # –¢–µ—Å—Ç Flask —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    test_flask_integration()
    
    # –¢–µ—Å—Ç API (—è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π)
    test_api_endpoints()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìñ –î–ª—è –∑–∞–ø—É—Å–∫—É:")
    print("1. python web_server.py")
    print("2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ chess-react-demo.html —É –±—Ä–∞—É–∑–µ—Ä—ñ")
    print("3. –ê–±–æ —ñ–Ω—Ç–µ–≥—Ä—É–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —É –≤–∞—à React –ø—Ä–æ–µ–∫—Ç")

if __name__ == "__main__":
    main()