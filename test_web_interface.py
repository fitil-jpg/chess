#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Chess AI Dashboard
"""

import requests
import time
import threading
import json
from datetime import datetime

def test_api_endpoints():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤"""
    base_url = "http://localhost:5000"
    
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Chess AI Dashboard")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{base_url}/api/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å API: {response.status_code}")
            print(f"   –ß–∞—Å —Å–µ—Ä–≤–µ—Ä–∞: {data.get('timestamp', 'N/A')}")
        else:
            print(f"‚ùå –°—Ç–∞—Ç—É—Å API: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç—É—Å—É API: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä
    try:
        response = requests.get(f"{base_url}/api/games", timeout=5)
        if response.status_code == 200:
            games = response.json()
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä: {response.status_code} ({len(games)} —ñ–≥–æ—Ä)")
        else:
            print(f"‚ùå –°–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∫—É —ñ–≥–æ—Ä: {e}")
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—ñ–≤
    try:
        response = requests.get(f"{base_url}/api/modules", timeout=5)
        if response.status_code == 200:
            modules = response.json()
            print(f"‚úÖ –ú–æ–¥—É–ª—ñ: {response.status_code} ({len(modules)} –º–æ–¥—É–ª—ñ–≤)")
        else:
            print(f"‚ùå –ú–æ–¥—É–ª—ñ: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥—É–ª—ñ–≤: {e}")
    
    # –¢–µ—Å—Ç 4: –î–æ—Å—Ç—É–ø–Ω—ñ –±–æ—Ç–∏
    try:
        response = requests.get(f"{base_url}/api/bots", timeout=5)
        if response.status_code == 200:
            bots = response.json()
            print(f"‚úÖ –ë–æ—Ç–∏: {response.status_code} ({len(bots)} –±–æ—Ç—ñ–≤)")
        else:
            print(f"‚ùå –ë–æ—Ç–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –±–æ—Ç—ñ–≤: {e}")
    
    # –¢–µ—Å—Ç 5: –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
    try:
        response = requests.post(f"{base_url}/api/game/start", 
                               json={"white_bot": "StockfishBot", "black_bot": "DynamicBot"},
                               timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏: {response.status_code}")
            print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data.get('message', 'N/A')}")
        else:
            print(f"‚ùå –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –≥—Ä–∏: {e}")
    
    # –¢–µ—Å—Ç 6: –°—Ç–∞–Ω –≥—Ä–∏
    try:
        response = requests.get(f"{base_url}/api/game/state", timeout=5)
        if response.status_code == 200:
            state = response.json()
            print(f"‚úÖ –°—Ç–∞–Ω –≥—Ä–∏: {response.status_code}")
            print(f"   FEN: {state.get('fen', 'N/A')[:50]}...")
        else:
            print(f"‚ùå –°—Ç–∞–Ω –≥—Ä–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞–Ω—É –≥—Ä–∏: {e}")
    
    # –¢–µ—Å—Ç 7: –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É
    try:
        response = requests.post(f"{base_url}/api/game/move", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –•—ñ–¥: {response.status_code}")
            if data.get('success') and data.get('move_result'):
                move = data['move_result'].get('move', 'N/A')
                print(f"   –•—ñ–¥: {move}")
        else:
            print(f"‚ùå –•—ñ–¥: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ö–æ–¥—É: {e}")
    
    # –¢–µ—Å—Ç 8: –ó—É–ø–∏–Ω–∫–∞ –≥—Ä–∏
    try:
        response = requests.post(f"{base_url}/api/game/stop", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ó—É–ø–∏–Ω–∫–∞ –≥—Ä–∏: {response.status_code}")
        else:
            print(f"‚ùå –ó—É–ø–∏–Ω–∫–∞ –≥—Ä–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –≥—Ä–∏: {e}")
    
    print("=" * 50)
    print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

def test_web_interface():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    print("\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
    print("=" * 30)
    
    try:
        response = requests.get("http://localhost:5000/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è")
            if "Chess AI Analytics Dashboard" in response.text:
                print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"‚ùå –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ localhost:5000")
    print()
    
    # –î–∞—î–º–æ —á–∞—Å —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è
    time.sleep(1)
    
    # –¢–µ—Å—Ç—É—î–º–æ API
    test_api_endpoints()
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    test_web_interface()
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    print("- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:5000")
    print("- API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å")
    print("- –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è")
    print("- –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è! üéâ")

if __name__ == "__main__":
    main()