#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_tournament_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç—É—Ä–Ω–∏—Ä–∞"""
    print("=== –¢–ï–°–¢ –ù–ê–°–¢–†–û–ô–ö–ò –¢–£–†–ù–ò–†–ê ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "tournament_runner.py",
        "tournament_pattern_viewer.py", 
        "Dockerfile.tournament",
        "docker-compose.tournament.yml",
        "run_tournament.sh",
        "tournament_config.json"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ["tournament_logs", "tournament_patterns", "tournament_stats"]
    missing_dirs = []
    for dir_name in required_dirs:
        if not os.path.exists(dir_name):
            missing_dirs.append(dir_name)
    
    if missing_dirs:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {missing_dirs}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open("tournament_config.json", "r") as f:
            config = json.load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   - –ò–≥—Ä –Ω–∞ –º–∞—Ç—á: {config['tournament_settings']['games_per_match']}")
        print(f"   - –í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É: {config['tournament_settings']['time_per_game_seconds']}—Å")
        print(f"   - –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(config['participating_bots'])}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True

def test_bot_availability():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤"""
    print("\n=== –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò –ë–û–¢–û–í ===")
    
    try:
        from chess_ai.bot_agent import get_agent_names, make_agent
        import chess
        
        available_bots = get_agent_names()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –±–æ—Ç–æ–≤: {len(available_bots)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤
        test_bots = ["RandomBot", "DynamicBot", "FortifyBot"]
        for bot_name in test_bots:
            if bot_name in available_bots:
                try:
                    bot = make_agent(bot_name, chess.WHITE)
                    print(f"‚úÖ {bot_name} - OK")
                except Exception as e:
                    print(f"‚ùå {bot_name} - –û—à–∏–±–∫–∞: {e}")
            else:
                print(f"‚ö†Ô∏è  {bot_name} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–æ–≤: {e}")
        return False

def test_pattern_storage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\n=== –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–ê–¢–¢–ï–†–ù–û–í ===")
    
    try:
        from tournament_pattern_viewer import TournamentPatternStorage, TournamentPattern
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        test_pattern = TournamentPattern(
            id="test_123",
            bot1="TestBot1",
            bot2="TestBot2", 
            result="1-0",
            moves=["e4", "e5", "Nf3"],
            final_fen="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            move_count=3,
            timestamp="2024-01-01T12:00:00",
            game_context={"test": True}
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        storage = TournamentPatternStorage("test_patterns")
        storage.save_pattern(test_pattern)
        print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        loaded_pattern = storage.get_pattern("test_123")
        if loaded_pattern and loaded_pattern.bot1 == "TestBot1":
            print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
            return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        storage.delete_pattern("test_123")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False

def test_docker_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Docker"""
    print("\n=== –¢–ï–°–¢ DOCKER –ù–ê–°–¢–†–û–ô–ö–ò ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
    import subprocess
    try:
        result = subprocess.run(["docker", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
    try:
        result = subprocess.run(["docker-compose", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –¢–£–†–ù–ò–†–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    tests = [
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞", test_tournament_setup),
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤", test_bot_availability), 
        ("–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", test_pattern_storage),
        ("Docker –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", test_docker_setup)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  ./run_tournament.sh")
        print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print("  python run_tournament_pattern_viewer.py")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∏—Å—Ç–µ–º—ã.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)