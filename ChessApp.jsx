import React, { useState, useEffect } from 'react';
import ChessBoard from './ChessBoard';
import './ChessBoard.css';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π React –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è —à–∞—Ö–æ–≤–æ—ó –≥—Ä–∏ –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é
 */
const ChessApp = () => {
  const [gameData, setGameData] = useState({
    currentGame: 0,
    totalGames: 0,
    whiteWins: 0,
    blackWins: 0,
    draws: 0
  });
  const [availableBots, setAvailableBots] = useState([]);
  const [selectedBots, setSelectedBots] = useState({
    white: 'StockfishBot',
    black: 'DynamicBot'
  });
  const [gameHistory, setGameHistory] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [infiniteMode, setInfiniteMode] = useState(true);
  const [currentGameNumber, setCurrentGameNumber] = useState(0);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –±–æ—Ç—ñ–≤
  useEffect(() => {
    const loadBots = async () => {
      try {
        const response = await fetch('/api/bots');
        if (response.ok) {
          const bots = await response.json();
          setAvailableBots(bots);
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–æ—Ç—ñ–≤:', error);
      }
    };

    loadBots();
  }, []);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ñ–≥–æ—Ä
  useEffect(() => {
    const loadGameStats = async () => {
      try {
        const response = await fetch('/api/games');
        if (response.ok) {
          const games = await response.json();
          const stats = {
            currentGame: currentGameNumber,
            totalGames: games.length,
            whiteWins: games.filter(g => g.result === '1-0').length,
            blackWins: games.filter(g => g.result === '0-1').length,
            draws: games.filter(g => g.result === '1/2-1/2').length
          };
          setGameData(stats);
        }
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      }
    };

    loadGameStats();
  }, []);

  // –û–±—Ä–æ–±–∫–∞ —Ö–æ–¥—É
  const handleMove = (moveData) => {
    console.log('–•—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ:', moveData);
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ —Ö–æ–¥—É
  };

  // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
  const handleGameEnd = (gameEndData) => {
    console.log('–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞:', gameEndData);
    setGameHistory(prev => [...prev, gameEndData]);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    setGameData(prev => ({
      ...prev,
      totalGames: prev.totalGames + 1,
      whiteWins: gameEndData.result === '1-0' ? prev.whiteWins + 1 : prev.whiteWins,
      blackWins: gameEndData.result === '0-1' ? prev.blackWins + 1 : prev.blackWins,
      draws: gameEndData.result === '1/2-1/2' ? prev.draws + 1 : prev.draws
    }));
    
    // –í –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
    if (infiniteMode) {
      setCurrentGameNumber(prev => prev + 1);
      setTimeout(() => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –≤ ChessBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
      }, 1000);
    }
  };

  // –ó–º—ñ–Ω–∞ –±–æ—Ç—ñ–≤
  const handleBotChange = (color, bot) => {
    setSelectedBots(prev => ({
      ...prev,
      [color]: bot
    }));
  };

  return (
    <div className="chess-app">
      <header className="app-header">
        <h1>‚ôüÔ∏è Chess AI Analytics Dashboard</h1>
        <p>–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —à–∞—Ö–æ–≤–∏—Ö –±–æ—Ç—ñ–≤ –∑ —Ä–µ–∞–ª—å–Ω–∏–º —á–∞—Å–æ–º</p>
      </header>

      <div className="app-content">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="stats-panel">
          <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ñ–≥–æ—Ä</h3>
          <div className="stats-grid">
            <div className="stat-card">
              <div className="stat-value">{gameData.currentGame}</div>
              <div className="stat-label">–ü–æ—Ç–æ—á–Ω–∞ –≥—Ä–∞</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">{gameData.totalGames}</div>
              <div className="stat-label">–í—Å—å–æ–≥–æ —ñ–≥–æ—Ä</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">{gameData.whiteWins}</div>
              <div className="stat-label">–ü–µ—Ä–µ–º–æ–≥–∏ –±—ñ–ª–∏—Ö</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">{gameData.blackWins}</div>
              <div className="stat-label">–ü–µ—Ä–µ–º–æ–≥–∏ —á–æ—Ä–Ω–∏—Ö</div>
            </div>
            <div className="stat-card">
              <div className="stat-value">{gameData.draws}</div>
              <div className="stat-label">–ù—ñ—á–∏—ó</div>
            </div>
          </div>
        </div>

        {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—ñ–≤ */}
        <div className="bot-settings">
          <h3>ü§ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—ñ–≤</h3>
          <div className="bot-selectors">
            <div className="bot-selector">
              <label>–ë—ñ–ª—ñ:</label>
              <select 
                value={selectedBots.white} 
                onChange={(e) => handleBotChange('white', e.target.value)}
              >
                {availableBots.map(bot => (
                  <option key={bot} value={bot}>{bot}</option>
                ))}
              </select>
            </div>
            <div className="bot-selector">
              <label>–ß–æ—Ä–Ω—ñ:</label>
              <select 
                value={selectedBots.black} 
                onChange={(e) => handleBotChange('black', e.target.value)}
              >
                {availableBots.map(bot => (
                  <option key={bot} value={bot}>{bot}</option>
                ))}
              </select>
            </div>
          </div>
          <div className="mode-selector">
            <label>
              <input 
                type="checkbox" 
                checked={infiniteMode}
                onChange={(e) => setInfiniteMode(e.target.checked)}
              />
              ‚ôæÔ∏è –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ä–µ–∂–∏–º
            </label>
          </div>
        </div>

        {/* –®–∞—Ö–æ–≤–∞ –¥–æ—Å–∫–∞ */}
        <ChessBoard
          onMove={handleMove}
          onGameEnd={handleGameEnd}
          showMoveHistory={true}
          showAnalytics={true}
          apiEndpoint="/api/game"
          autoPlay={true}
          whiteBot={selectedBots.white}
          blackBot={selectedBots.black}
          infiniteMode={infiniteMode}
        />

        {/* –Ü—Å—Ç–æ—Ä—ñ—è —ñ–≥–æ—Ä */}
        {gameHistory.length > 0 && (
          <div className="game-history-panel">
            <h3>üìã –û—Å—Ç–∞–Ω–Ω—ñ —ñ–≥—Ä–∏</h3>
            <div className="history-list">
              {gameHistory.slice(-5).reverse().map((game, index) => (
                <div key={index} className="history-item">
                  <div className="game-info">
                    <span>–ì—Ä–∞ #{gameHistory.length - index}</span>
                    <span className={`result ${game.result?.replace('/', '-')}`}>
                      {game.result}
                    </span>
                  </div>
                  <div className="game-details">
                    {game.bot && <span>–ë–æ—Ç: {game.bot}</span>}
                    {game.confidence && (
                      <span>–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {Math.round(game.confidence * 100)}%</span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ChessApp;